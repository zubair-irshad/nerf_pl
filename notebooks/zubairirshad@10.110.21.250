{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "8a41bf52",
   "metadata": {},
   "outputs": [],
   "source": [
    "video_id = 'camera/batch-11/6'\n",
    "# download_dir = './nerf_data'\n",
    "\n",
    "v_id = 'camera_batch-11_6'\n",
    "\n",
    "download_dir = './Objectron_data/'+v_id"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "635314df",
   "metadata": {},
   "outputs": [],
   "source": [
    "from os import path\n",
    "import glob\n",
    "import os\n",
    "import struct\n",
    "import sys\n",
    "import cv2\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import requests\n",
    "from matplotlib import image\n",
    "public_url = \"https://storage.googleapis.com/objectron\"\n",
    "os.makedirs(download_dir, exist_ok=True)\n",
    "video_filename = f'{public_url}/videos/{video_id}/video.MOV'\n",
    "public_url = \"https://storage.googleapis.com/objectron\"\n",
    "urls = [f'{public_url}/videos/{video_id}/video.MOV',\n",
    "       f'{public_url}/videos/{video_id}/sfm_arframe.pbdata',\n",
    "       f'{public_url}/annotations/{video_id}.pbdata']\n",
    "for url in urls:\n",
    "    with open(path.join(download_dir, path.basename(url)), \"wb\") as f:\n",
    "        f.write(requests.get(url).content)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "2969aacd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total 24M\r\n",
      "196K 6.pbdata\r\n",
      "2.2M sfm_arframe.pbdata\r\n",
      " 22M video.MOV\r\n"
     ]
    }
   ],
   "source": [
    "ls -sh1 ./Objectron_data/camera_batch-11_6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "aaca949c",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "bash: line 1: =: command not found\n",
      "ffmpeg version 3.4.11-0ubuntu0.1 Copyright (c) 2000-2022 the FFmpeg developers\n",
      "  built with gcc 7 (Ubuntu 7.5.0-3ubuntu1~18.04)\n",
      "  configuration: --prefix=/usr --extra-version=0ubuntu0.1 --toolchain=hardened --libdir=/usr/lib/x86_64-linux-gnu --incdir=/usr/include/x86_64-linux-gnu --enable-gpl --disable-stripping --enable-avresample --enable-avisynth --enable-gnutls --enable-ladspa --enable-libass --enable-libbluray --enable-libbs2b --enable-libcaca --enable-libcdio --enable-libflite --enable-libfontconfig --enable-libfreetype --enable-libfribidi --enable-libgme --enable-libgsm --enable-libmp3lame --enable-libmysofa --enable-libopenjpeg --enable-libopenmpt --enable-libopus --enable-libpulse --enable-librubberband --enable-librsvg --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libspeex --enable-libssh --enable-libtheora --enable-libtwolame --enable-libvorbis --enable-libvpx --enable-libwavpack --enable-libwebp --enable-libx265 --enable-libxml2 --enable-libxvid --enable-libzmq --enable-libzvbi --enable-omx --enable-openal --enable-opengl --enable-sdl2 --enable-libdc1394 --enable-libdrm --enable-libiec61883 --enable-chromaprint --enable-frei0r --enable-libopencv --enable-libx264 --enable-shared\n",
      "  libavutil      55. 78.100 / 55. 78.100\n",
      "  libavcodec     57.107.100 / 57.107.100\n",
      "  libavformat    57. 83.100 / 57. 83.100\n",
      "  libavdevice    57. 10.100 / 57. 10.100\n",
      "  libavfilter     6.107.100 /  6.107.100\n",
      "  libavresample   3.  7.  0 /  3.  7.  0\n",
      "  libswscale      4.  8.100 /  4.  8.100\n",
      "  libswresample   2.  9.100 /  2.  9.100\n",
      "  libpostproc    54.  7.100 / 54.  7.100\n",
      "Input #0, mov,mp4,m4a,3gp,3g2,mj2, from 'video.MOV':\n",
      "  Metadata:\n",
      "    major_brand     : qt  \n",
      "    minor_version   : 0\n",
      "    compatible_brands: qt  \n",
      "    creation_time   : 2020-01-16T14:42:03.000000Z\n",
      "  Duration: 00:00:10.40, start: 0.000000, bitrate: 17468 kb/s\n",
      "    Stream #0:0(und): Video: h264 (High) (avc1 / 0x31637661), yuv420p, 1920x1440, 17466 kb/s, 30 fps, 30 tbr, 600 tbn, 1200 tbc (default)\n",
      "    Metadata:\n",
      "      rotate          : 90\n",
      "      creation_time   : 2020-01-16T14:42:03.000000Z\n",
      "      handler_name    : Core Media Data Handler\n",
      "      encoder         : H.264\n",
      "    Side data:\n",
      "      displaymatrix: rotation of -90.00 degrees\n",
      "Stream mapping:\n",
      "  Stream #0:0 -> #0:0 (h264 (native) -> png (native))\n",
      "Press [q] to stop, [?] for help\n",
      "Output #0, image2, to 'images_3/%05d.png':\n",
      "  Metadata:\n",
      "    major_brand     : qt  \n",
      "    minor_version   : 0\n",
      "    compatible_brands: qt  \n",
      "    encoder         : Lavf57.83.100\n",
      "    Stream #0:0(und): Video: png, rgb24, 480x640, q=2-31, 200 kb/s, 30 fps, 30 tbn, 30 tbc (default)\n",
      "    Metadata:\n",
      "      encoder         : Lavc57.107.100 png\n",
      "      creation_time   : 2020-01-16T14:42:03.000000Z\n",
      "      handler_name    : Core Media Data Handler\n",
      "    Side data:\n",
      "      displaymatrix: rotation of -0.00 degrees\n",
      "frame=   60 fps=0.0 q=-0.0 size=N/A time=00:00:01.76 bitrate=N/A speed=3.48x    \r",
      "frame=  121 fps=119 q=-0.0 size=N/A time=00:00:03.80 bitrate=N/A speed=3.74x    \r",
      "frame=  178 fps=117 q=-0.0 size=N/A time=00:00:05.70 bitrate=N/A speed=3.76x    \r",
      "frame=  235 fps=116 q=-0.0 size=N/A time=00:00:07.60 bitrate=N/A speed=3.76x    \r",
      "frame=  292 fps=116 q=-0.0 size=N/A time=00:00:09.50 bitrate=N/A speed=3.76x    \r",
      "frame=  312 fps=114 q=-0.0 Lsize=N/A time=00:00:10.40 bitrate=N/A speed=3.81x    \n",
      "video:99390kB audio:0kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: unknown\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "$v_id = v_id\n",
    "cd ./Objectron_data/camera_batch-11_6\n",
    "mkdir -p \"images_3\"\n",
    "ffmpeg -i video.MOV -vsync vfr -vf \"scale=iw/3:ih/3\" -start_number 0 \"images_3/%05d.png\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6ede0802",
   "metadata": {},
   "outputs": [],
   "source": [
    "sequence_filenames = sorted(glob.glob('Objectron_data/'+v_id+'/images/*.png'))\n",
    "geometry_filename = 'Objectron_data/'+v_id+'geometry.pbdata'\n",
    "sfm_arframe_filename = 'Objectron_data/'+v_id+'/sfm_arframe.pbdata'\n",
    "annotation_file = 'Objectron_data/'+v_id+'/28.pbdata'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0dacdfbb",
   "metadata": {},
   "outputs": [],
   "source": [
    "from objectron.schema import a_r_capture_metadata_pb2 as ar_metadata_protocol\n",
    "\n",
    "def load_frame_data(geometry_filename):\n",
    "    # See get_geometry_data in objectron-geometry-tutorial.ipynb\n",
    "    frame_data = []\n",
    "    with open(geometry_filename, 'rb') as pb:\n",
    "        proto_buf = pb.read()\n",
    "\n",
    "        i = 0\n",
    "        while i < len(proto_buf):\n",
    "            msg_len = struct.unpack('<I', proto_buf[i:i + 4])[0]\n",
    "            i += 4\n",
    "            message_buf = proto_buf[i:i + msg_len]\n",
    "            i += msg_len\n",
    "            frame = ar_metadata_protocol.ARFrame()\n",
    "            frame.ParseFromString(message_buf)\n",
    "            frame_data.append(frame)\n",
    "    return frame_data\n",
    "\n",
    "frame_data = load_frame_data(sfm_arframe_filename)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e0161509",
   "metadata": {},
   "outputs": [],
   "source": [
    "from PIL import Image\n",
    "import torch\n",
    "im = sequence_filenames[0]\n",
    "\n",
    "img = Image.open(im) \n",
    "print(np.array(img).shape)\n",
    "import numpy as np\n",
    "\n",
    "plt.imshow(np.array(img))\n",
    "plt.show()\n",
    "\n",
    "img_rot = img.transpose(Image.ROTATE_90)\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "print(np.array(img_rot).shape)\n",
    "plt.imshow(np.array(img_rot))\n",
    "plt.show()\n",
    "\n",
    "img_tensor = torch.tensor(np.array(img_rot))\n",
    "\n",
    "import torchvision.transforms as T\n",
    "\n",
    "# rotated_back_tensor = T.functional.rotate(img_tensor, -90)\n",
    "# print(img_tensor.shape)\n",
    "rotated_back_tensor = torch.rot90(img_tensor, dims=(1, 0))\n",
    "# rotated_back = np.rot90(np.array(img_rot), axes=(1, 0))\n",
    "plt.imshow(np.array(rotated_back_tensor.numpy()))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d7b02db4",
   "metadata": {},
   "outputs": [],
   "source": [
    "step = 50\n",
    "\n",
    "plt.figure(figsize=(10,3))\n",
    "plt.imshow(np.concatenate([image.imread(filename) for filename in sequence_filenames[::step]], axis=1))\n",
    "plt.axis('off')\n",
    "plt.show()\n",
    "print(f'{len(sequence_filenames)} PNG files found')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "594a93a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_poses_bounds_array(frame_data, near=0.2, far=10):\n",
    "    # See https://github.com/Fyusion/LLFF#using-your-own-poses-without-running-colmap\n",
    "    # Returns an array of shape (N, 17).\n",
    "    rows = []\n",
    "    all_c2w = []\n",
    "    for frame in frame_data:\n",
    "        camera = frame.camera        \n",
    "        print(camera.intrinsics)\n",
    "        focal = camera.intrinsics[0]\n",
    "#         print(\"camera.intrinsics T\", np.array(camera.intrinsics).T)\n",
    "#         print(\"camera.intrinsics\", camera.intrinsics)\n",
    "#         print(\"camera.projection matrix\", np.array(camera.projection_matrix).reshape(4,4))\n",
    "        print(camera.image_resolution_width)\n",
    "        print(camera.image_resolution_height)\n",
    "        print(\"camera view matrix\", np.array(camera.view_matrix).reshape(4,4))\n",
    "        cam_to_world = np.array(camera.transform).reshape(4,4)\n",
    "        print(\"cam to world\",  cam_to_world)\n",
    "        all_c2w.append(cam_to_world)\n",
    "    return all_c2w, focal\n",
    "        \n",
    "frame_data = load_frame_data(sfm_arframe_filename)\n",
    "\n",
    "poses = make_poses_bounds_array(frame_data, near=0.2, far=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "48247e4c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_frame_annotation(sequence, frame_id):\n",
    "  \"\"\"Grab an annotated frame from the sequence.\"\"\"\n",
    "  data = sequence.frame_annotations[frame_id]\n",
    "  object_id = 0\n",
    "  object_keypoints_2d = []\n",
    "  object_keypoints_3d = []\n",
    "  object_rotations = []\n",
    "  object_translations = []\n",
    "  object_scale = []\n",
    "  num_keypoints_per_object = []\n",
    "  object_categories = []\n",
    "  annotation_types = []\n",
    "  # Get the camera for the current frame. We will use the camera to bring\n",
    "  # the object from the world coordinate to the current camera coordinate.\n",
    "  camera = np.array(data.camera.transform).reshape(4, 4)\n",
    "\n",
    "  for obj in sequence.objects:\n",
    "    rotation = np.array(obj.rotation).reshape(3, 3)\n",
    "    translation = np.array(obj.translation)\n",
    "    object_scale.append(np.array(obj.scale))\n",
    "    transformation = np.identity(4)\n",
    "    transformation[:3, :3] = rotation\n",
    "    transformation[:3, 3] = translation\n",
    "    obj_cam = np.matmul(camera, transformation)\n",
    "    object_translations.append(obj_cam[:3, 3])\n",
    "    object_rotations.append(obj_cam[:3, :3])\n",
    "    object_categories.append(obj.category)\n",
    "    annotation_types.append(obj.type)\n",
    "\n",
    "  keypoint_size_list = []\n",
    "  for annotations in data.annotations:\n",
    "    num_keypoints = len(annotations.keypoints)\n",
    "    keypoint_size_list.append(num_keypoints)\n",
    "    for keypoint_id in range(num_keypoints):\n",
    "      keypoint = annotations.keypoints[keypoint_id]\n",
    "      object_keypoints_2d.append(\n",
    "          (keypoint.point_2d.x, keypoint.point_2d.y, keypoint.point_2d.depth))\n",
    "      object_keypoints_3d.append(\n",
    "          (keypoint.point_3d.x, keypoint.point_3d.y, keypoint.point_3d.z))\n",
    "    num_keypoints_per_object.append(num_keypoints)\n",
    "    object_id += 1\n",
    "  return (object_keypoints_2d, object_categories, keypoint_size_list,\n",
    "          annotation_types)\n",
    "\n",
    "\n",
    "def grab_frame(video_file, frame_ids):\n",
    "  \"\"\"Grab an image frame from the video file.\"\"\"\n",
    "  frames = []\n",
    "  capture = cv2.VideoCapture(video_file)\n",
    "  height = int(capture.get(cv2.CAP_PROP_FRAME_HEIGHT))\n",
    "  width = int(capture.get(cv2.CAP_PROP_FRAME_WIDTH))\n",
    "  capture.release()\n",
    "    \n",
    "  print(\"width, height\", width, height)\n",
    "  frame_size = width * height * 3\n",
    "\n",
    "  for frame_id in frame_ids:\n",
    "    frame_filter = r'select=\\'eq(n\\,{:d})\\''.format(frame_id)\n",
    "    command = [\n",
    "        'ffmpeg', '-i', video_file, '-f', 'image2pipe', '-vf', frame_filter,\n",
    "        '-pix_fmt', 'rgb24', '-vcodec', 'rawvideo', '-vsync', 'vfr', '-'\n",
    "    ]\n",
    "    pipe = subprocess.Popen(\n",
    "        command, stdout=subprocess.PIPE, bufsize = 151 * frame_size)\n",
    "    current_frame = np.fromstring(\n",
    "        pipe.stdout.read(frame_size), dtype='uint8').reshape(width, height, 3)\n",
    "    pipe.stdout.flush()\n",
    "\n",
    "    frames.append(current_frame)\n",
    "  return frames"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2c230725",
   "metadata": {},
   "outputs": [],
   "source": [
    "# The annotations are stored in protocol buffer format. \n",
    "from objectron.schema import object_pb2 as object_protocol\n",
    "from objectron.schema import annotation_data_pb2 as annotation_protocol\n",
    "# The AR Metadata captured with each frame in the video\n",
    "from objectron.schema import a_r_capture_metadata_pb2 as ar_metadata_protocol\n",
    "from objectron.dataset import box as Box\n",
    "from objectron.dataset import graphics\n",
    "import subprocess\n",
    "\n",
    "frame_id = 28\n",
    "with open(annotation_file, 'rb') as pb:\n",
    "    sequence = annotation_protocol.Sequence()\n",
    "    sequence.ParseFromString(pb.read())\n",
    "    frame = grab_frame(video_filename, [frame_id])\n",
    "    annotation, cat, num_keypoints, types = get_frame_annotation(sequence, frame_id)\n",
    "    image = graphics.draw_annotation_on_image(frame[0], annotation, num_keypoints)\n",
    "    print(\"image\", image.shape)\n",
    "    imgplot = plt.imshow(image)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ee3207cb",
   "metadata": {},
   "outputs": [],
   "source": [
    "adjust_matrix = np.array(\n",
    "    [[0.,   1.,   0., 0],\n",
    "     [1.,   0.,   0., 0],\n",
    "     [0.,   0.,  -1., 0],\n",
    "     [0.,   0.,  0., 1]])\n",
    "     \n",
    "print(np.linalg.inv(adjust_matrix))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "a1652d01",
   "metadata": {},
   "outputs": [],
   "source": [
    "import _pickle as cPickle\n",
    "import numpy as np\n",
    "import cv2\n",
    "import colorsys\n",
    "import glob\n",
    "import os\n",
    "import cv2\n",
    "def apply_mask(image, mask, color, alpha=0.5):\n",
    "    \"\"\"Apply the given mask to the image.\n",
    "    \"\"\"\n",
    "    for c in range(3):\n",
    "        image[:, :, c] = np.where(mask == 1,\n",
    "                                  image[:, :, c] *\n",
    "                                  (1 - alpha) + alpha * color[c] * 255,\n",
    "                                  image[:, :, c])\n",
    "    return image\n",
    "\n",
    "\n",
    "def random_colors(N, bright=True):\n",
    "    \"\"\"\n",
    "    Generate random colors.\n",
    "    To get visually distinct colors, generate them in HSV space then\n",
    "    convert to RGB.\n",
    "    \"\"\"\n",
    "    brightness = 1.0 if bright else 0.7\n",
    "    hsv = [(i / N, 1, brightness) for i in range(N)]\n",
    "    colors = list(map(lambda c: colorsys.hsv_to_rgb(*c), hsv))\n",
    "    # random.shuffle(colors)\n",
    "    return colors\n",
    "\n",
    "def get_valid_masks_index(mask_out, threshold):\n",
    "    index_centers = []\n",
    "    areas = []\n",
    "    for m in range(mask_out.shape[2]):\n",
    "        pos = np.where(mask_out[:,:, m]>0)\n",
    "        center_x = np.average(pos[0])\n",
    "        center_y = np.average(pos[1])\n",
    "        xmin = np.min(pos[1])\n",
    "        xmax = np.max(pos[1])\n",
    "        ymin = np.min(pos[0])\n",
    "        ymax = np.max(pos[0])\n",
    "        areas.append(((ymax-ymin)* (xmax-xmin))/100)\n",
    "        index_centers.append([center_x, center_y])\n",
    "\n",
    "    index = np.argmax(areas)\n",
    "    index_centers = np.array(index_centers)\n",
    "    print(\"areas\",areas)\n",
    "    valid_mask_indices = []\n",
    "    for j in range(len(index_centers)):\n",
    "        if areas[j] <20:\n",
    "            continue\n",
    "        if j == index:\n",
    "            valid_mask_indices.append(j)\n",
    "            continue\n",
    "        point = index_centers[index]\n",
    "        distance = np.linalg.norm(index_centers[j]-point)\n",
    "        print(\"distance\", distance)\n",
    "        if distance<threshold:\n",
    "            valid_mask_indices.append(j)\n",
    "    return valid_mask_indices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "7408c2ad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "num 70\n",
      "results_00070.pkl\n",
      "/home/zubair/nerf_pl/Objectron_data/camera_batch-11_6/results/results_00070.pkl\n",
      "{'rois': array([], shape=(0, 4), dtype=int32), 'class_ids': array([], dtype=int32), 'scores': array([], dtype=float32), 'masks': array([], shape=(640, 480, 0), dtype=float64)}\n",
      "[]\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "attempt to get argmax of an empty sequence",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-45-ea51d195dc15>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     23\u001b[0m     \u001b[0mmask_out\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmrcnn_result\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'masks'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmask_out\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 25\u001b[0;31m     \u001b[0mvalid_mask_indices\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_valid_masks_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmask_out\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m173\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     26\u001b[0m     \u001b[0mcolors\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrandom_colors\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmrcnn_result\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'masks'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-35-336d6e5addd2>\u001b[0m in \u001b[0;36mget_valid_masks_index\u001b[0;34m(mask_out, threshold)\u001b[0m\n\u001b[1;32m     43\u001b[0m         \u001b[0mindex_centers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcenter_x\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcenter_y\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     44\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 45\u001b[0;31m     \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mareas\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     46\u001b[0m     \u001b[0mindex_centers\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex_centers\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     47\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"areas\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mareas\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<__array_function__ internals>\u001b[0m in \u001b[0;36margmax\u001b[0;34m(*args, **kwargs)\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/nerf_pl/lib/python3.6/site-packages/numpy/core/fromnumeric.py\u001b[0m in \u001b[0;36margmax\u001b[0;34m(a, axis, out)\u001b[0m\n\u001b[1;32m   1186\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1187\u001b[0m     \"\"\"\n\u001b[0;32m-> 1188\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_wrapfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'argmax'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1189\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1190\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/nerf_pl/lib/python3.6/site-packages/numpy/core/fromnumeric.py\u001b[0m in \u001b[0;36m_wrapfunc\u001b[0;34m(obj, method, *args, **kwds)\u001b[0m\n\u001b[1;32m     53\u001b[0m     \u001b[0mbound\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mbound\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 55\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_wrapit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     56\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     57\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/nerf_pl/lib/python3.6/site-packages/numpy/core/fromnumeric.py\u001b[0m in \u001b[0;36m_wrapit\u001b[0;34m(obj, method, *args, **kwds)\u001b[0m\n\u001b[1;32m     42\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mAttributeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m         \u001b[0mwrap\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 44\u001b[0;31m     \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     45\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mwrap\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     46\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmu\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: attempt to get argmax of an empty sequence"
     ]
    }
   ],
   "source": [
    "\n",
    "results_dir = '/home/zubair/nerf_pl/Objectron_data/camera_batch-11_6/results'\n",
    "image_dir = '/home/zubair/nerf_pl/Objectron_data/camera_batch-11_6/images_3'\n",
    "image_save_dir = '/home/zubair/nerf_pl/Objectron_data/camera_batch-11_6/images_12'\n",
    "\n",
    "\n",
    "image_files = os.listdir(image_dir)\n",
    "result_files = os.listdir(results_dir)\n",
    "image_files.sort()\n",
    "result_files.sort()\n",
    "\n",
    "save_dir = '/home/zubair/nerf_pl/Objectron_data/camera_batch-11_6/output'\n",
    "os.makedirs(save_dir, exist_ok = True)\n",
    "for num, (img_file, result_file) in enumerate(zip(image_files, result_files)):\n",
    "    if num !=70:\n",
    "        continue\n",
    "    print(\"num\",num)\n",
    "    print(result_file)\n",
    "    print(os.path.join(results_dir, result_file))\n",
    "    with open(os.path.join(results_dir, result_file) , 'rb') as f:\n",
    "      mrcnn_result = cPickle.load(f)\n",
    "    img = cv2.imread(os.path.join(image_dir, img_file))\n",
    "    print(mrcnn_result)\n",
    "    mask_out = mrcnn_result['masks']\n",
    "    print(mask_out)\n",
    "    valid_mask_indices = get_valid_masks_index(mask_out, 173)\n",
    "    colors = random_colors(mrcnn_result['masks'].shape[2])\n",
    "\n",
    "    import matplotlib.pyplot as plt\n",
    "    total_mask = np.zeros((img.shape[0], img.shape[1]), dtype = bool)\n",
    "    for i in range(mask_out.shape[2]):\n",
    "#         plt.imshow(mask_out[:,:,i])\n",
    "#         plt.show()\n",
    "        if i in valid_mask_indices:\n",
    "            total_mask = np.logical_or(total_mask, mask_out[:,:,i])\n",
    "    \n",
    "    seg_masks = total_mask\n",
    "    print(total_mask.shape)\n",
    "    seg_masks = seg_masks.astype(np.uint8)\n",
    "    seg_masks = cv2.resize(seg_masks,(120,160), interpolation=cv2.INTER_NEAREST)\n",
    "    seg_masks = seg_masks.astype(np.uint8)\n",
    "    print(seg_masks.shape)\n",
    "    plt.imshow(seg_masks)\n",
    "    plt.show()\n",
    "    seg_write_name = 'mask_'+img_file\n",
    "    cv2.imwrite(os.path.join(image_save_dir,seg_write_name ), seg_masks* 255)\n",
    "#     plt.imshow(total_mask)\n",
    "    fig = plt.figure()\n",
    "    fig.set_size_inches(4.8, 6)\n",
    "    plt.axis('off')\n",
    "#     plt.show()\n",
    "    print(\"total_mask\", total_mask.shape)\n",
    "    print(\"img\", img.shape)\n",
    "    img = apply_mask(img, total_mask, colors[i])\n",
    "\n",
    "    plt.imshow(img)\n",
    "    plt.savefig(os.path.join(save_dir, 'masks'+str(num)), bbox_inches='tight')\n",
    "#     plt.show()\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dc9d4ef6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "8e5d5ca7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7fd555be2908>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from PIL import Image\n",
    "import os\n",
    "import cv2\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "colors = random_colors(1)\n",
    "image_save_dir = '/home/zubair/nerf_pl/Objectron_data/camera_batch-2_1/images_12'\n",
    "mask_save_dir = '/home/zubair/nerf_pl/Objectron_data/camera_batch-2_1/masks_12'\n",
    "\n",
    "img_pil = Image.open(os.path.join(image_save_dir, '00000.png'))\n",
    "img_pil = img_pil.transpose(Image.ROTATE_90) \n",
    "img = cv2.imread(os.path.join(image_save_dir, '00000.png'))\n",
    "mask = cv2.imread(os.path.join(mask_save_dir, 'mask_00000.png'), cv2.IMREAD_GRAYSCALE)\n",
    "\n",
    "img = np.rot90(np.array(img), axes=(1,0))\n",
    "\n",
    "mask = np.rot90(np.array(mask), axes=(0,1))\n",
    "mask = mask>0\n",
    "img = apply_mask(np.array(img_pil), mask, colors[0])\n",
    "\n",
    "plt.imshow(img)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "dd897197",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-7-817e69f10825>, line 4)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-7-817e69f10825>\"\u001b[0;36m, line \u001b[0;32m4\u001b[0m\n\u001b[0;31m    print(os.path.split(name)[1].split('.')[])\u001b[0m\n\u001b[0m                                            ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "\n",
    "name = '/home/ubuntu/nerf_pl/data/objectron/camera/camera_batch-2_1/images_12/00000.png'\n",
    "print(os.path.split(name)[1].split('.')[])\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "03e434f3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a116fbac",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "nerf_pl",
   "language": "python",
   "name": "nerf_pl"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
